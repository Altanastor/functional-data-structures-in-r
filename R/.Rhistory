q
q$helper
environment(q$helper)
q$front
q
add<- function(x) {
function(y)Â  x + y
}
adder <- lapply(1:10, add)
adder
adder[[1]]
adder[[1]](1)
adder[[10]](1)
heap_to_list <- function(x) {
l <- empty_list()
while (!is_empty(x)) {
l <- list_cons(find_minimal(x), l)
x <- delete_minimal(x)
}
l
}
heap_to_vector <- function(x) {
as.vector(heap_to_list(x), mode = class(find_minimal(x)))
}
heap_to_vector(z)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
z <- merge.default(x, y)
heap_to_vector(z)
heap_to_vector(vector_to_heap(1:10))
source('~/.active-rstudio-document', echo=TRUE)
heap_to_vector(vector_to_heap(empty_leftist_heap(), 1:10))
heap_to_vector(heap_sort(sample(1:10), empty_leftist_heap()))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
traceback()
vector_to_heap(empty_leftist_heap(), 1:10)
heap_to_vector(vector_to_heap(empty_leftist_heap(), 1:10))
heap_to_list(vector_to_heap(empty_leftist_heap(), 1:10))
as.vector(heap_to_list(vector_to_heap(empty_leftist_heap(), 1:10)))
as.vector(heap_to_list(vector_to_heap(empty_leftist_heap(), 1:10)), "integer")
as.vector(list_reverse(heap_to_list(vector_to_heap(empty_leftist_heap(), 1:10)), "integer"))
as.vector(list_reverse(heap_to_list(vector_to_heap(empty_leftist_heap(), 1:10))), "integer")
as.vector(heap_sort(sample(1:10), empty_leftist_heap()))
as.vector(heap_sort(sample(1:10), empty_leftist_heap()), "integer")
source('~/.active-rstudio-document', echo=TRUE)
x <- empty_leftist_heap()
x <- insert(x, 3)
x <- insert(x, 2)
x <- insert(x, 5)
y <- empty_leftist_heap()
y <- insert(y, 3)
y <- insert(y, 1)
y <- insert(y, 4)
merge.default <- function(x, y) {
while (!is_empty(y)) {
x <- insert(x, find_minimal(y))
y <- delete_minimal(y)
}
x
}
z <- merge.default(x, y)
vector_to_heap <- function(empty_heap, vec) {
heap <- empty_heap
for (e in vec)
heap <- insert(heap, e)
heap
}
heap_to_list <- function(x) {
l <- empty_list()
while (!is_empty(x)) {
l <- list_cons(find_minimal(x), l)
x <- delete_minimal(x)
}
l
}
heap_to_vector <- function(x) {
as.vector(heap_to_list(x), mode = class(find_minimal(x)))
}
heap_to_vector(vector_to_heap(empty_leftist_heap(), 1:10))
heap_sort <- function(vec, empty_heap) {
heap <- vector_to_heap(empty_heap, vec)
lst <- heap_to_list(heap)
list_reverse(lst)
}
heap_to_vector(heap_sort(sample(1:10), empty_leftist_heap()))
as.vector(heap_sort(sample(1:10), empty_leftist_heap()), "integer")
singleton_heap <- function(empty_heap, e) insert(empty_heap, e)
vector_to_heap <- function(vec, empty_heap, empty_queue) {
q <- empty_queue
for (e in vec)
q <- enqueue(q, singleton_heap(e))
repeat {
first <- front(q) ; q <- dequeue(q)
if (is_empty(q)) break
second <- front(q) ; q <- dequeue(q)
new_heap <- merge(first, second)
q <- enqueue(new_heap)
}
first
}
heap_sort <- function(vec, empty_heap, empty_queue) {
heap <- vector_to_heap(vec, empty_heap, empty_queue)
lst <- heap_to_list(heap)
list_reverse(lst)
}
as.vector(heap_sort(sample(1:10), empty_leftist_heap(), empty_env_queue()), "integer")
x <- empty_leftist_heap()
x <- insert(x, 3)
x <- insert(x, 2)
x <- insert(x, 5)
y <- empty_leftist_heap()
y <- insert(y, 3)
y <- insert(y, 1)
y <- insert(y, 4)
merge.default <- function(x, y) {
while (!is_empty(y)) {
x <- insert(x, find_minimal(y))
y <- delete_minimal(y)
}
x
}
z <- merge.default(x, y)
vector_to_heap <- function(empty_heap, vec) {
heap <- empty_heap
for (e in vec)
heap <- insert(heap, e)
heap
}
heap_to_list <- function(x) {
l <- empty_list()
while (!is_empty(x)) {
l <- list_cons(find_minimal(x), l)
x <- delete_minimal(x)
}
l
}
heap_to_vector <- function(x) {
as.vector(heap_to_list(x), mode = class(find_minimal(x)))
}
heap_to_vector(vector_to_heap(empty_leftist_heap(), 1:10))
heap_sort <- function(vec, empty_heap) {
heap <- vector_to_heap(empty_heap, vec)
lst <- heap_to_list(heap)
list_reverse(lst)
}
heap_to_vector(heap_sort(sample(1:10), empty_leftist_heap()))
as.vector(heap_sort(sample(1:10), empty_leftist_heap()), "integer")
sample(1:10)
vector_to_heap(1:10, empty_leftist_heap(), empty_env_deque())
vector_to_heap <- function(vec, empty_heap, empty_queue) {
q <- empty_queue
for (e in vec)
q <- enqueue(q, singleton_heap(e))
repeat {
first <- front(q) ; q <- dequeue(q)
if (is_empty(q)) break
second <- front(q) ; q <- dequeue(q)
new_heap <- merge(first, second)
q <- enqueue(new_heap)
}
first
}
vector_to_heap(1:10, empty_leftist_heap(), empty_env_deque())
vector_to_heap(1:10, empty_leftist_heap(), empty_env_queue())
source('~/.active-rstudio-document', echo=TRUE)
x <- empty_leftist_heap()
x <- insert(x, 3)
x <- insert(x, 2)
x <- insert(x, 5)
y <- empty_leftist_heap()
y <- insert(y, 3)
y <- insert(y, 1)
y <- insert(y, 4)
merge.default <- function(x, y) {
while (!is_empty(y)) {
x <- insert(x, find_minimal(y))
y <- delete_minimal(y)
}
x
}
z <- merge.default(x, y)
vector_to_heap <- function(empty_heap, vec) {
heap <- empty_heap
for (e in vec)
heap <- insert(heap, e)
heap
}
heap_to_list <- function(x) {
l <- empty_list()
while (!is_empty(x)) {
l <- list_cons(find_minimal(x), l)
x <- delete_minimal(x)
}
l
}
heap_to_vector <- function(x) {
as.vector(heap_to_list(x), mode = class(find_minimal(x)))
}
heap_to_vector(vector_to_heap(empty_leftist_heap(), 1:10))
heap_sort <- function(vec, empty_heap) {
heap <- vector_to_heap(empty_heap, vec)
lst <- heap_to_list(heap)
list_reverse(lst)
}
heap_to_vector(heap_sort(sample(1:10), empty_leftist_heap()))
as.vector(heap_sort(sample(1:10), empty_leftist_heap()), "integer")
x <- empty_leftist_heap()
x <- insert(x, 3)
x <- insert(x, 2)
x <- insert(x, 5)
y <- empty_leftist_heap()
y <- insert(y, 3)
y <- insert(y, 1)
y <- insert(y, 4)
merge.default <- function(x, y) {
while (!is_empty(y)) {
x <- insert(x, find_minimal(y))
y <- delete_minimal(y)
}
x
}
z <- merge.default(x, y)
vector_to_heap <- function(empty_heap, vec) {
heap <- empty_heap
for (e in vec)
heap <- insert(heap, e)
heap
}
heap_to_list <- function(x) {
l <- empty_list()
while (!is_empty(x)) {
l <- list_cons(find_minimal(x), l)
x <- delete_minimal(x)
}
l
}
heap_to_vector <- function(x) {
as.vector(heap_to_list(x), mode = class(find_minimal(x)))
}
heap_sort <- function(vec, empty_heap) {
heap <- vector_to_heap(empty_heap, vec)
lst <- heap_to_list(heap)
list_reverse(lst)
}
heap_to_vector(heap_sort(sample(1:10), empty_leftist_heap()))
as.vector(heap_sort(sample(1:10), empty_leftist_heap()), "integer")
x <- empty_leftist_heap()
x <- insert(x, 3)
x <- insert(x, 2)
x <- insert(x, 5)
y <- empty_leftist_heap()
y <- insert(y, 3)
y <- insert(y, 1)
y <- insert(y, 4)
merge.default <- function(x, y) {
while (!is_empty(y)) {
x <- insert(x, find_minimal(y))
y <- delete_minimal(y)
}
x
}
z <- merge.default(x, y)
vector_to_heap <- function(empty_heap, vec) {
heap <- empty_heap
for (e in vec)
heap <- insert(heap, e)
heap
}
heap_to_list <- function(x) {
l <- empty_list()
while (!is_empty(x)) {
l <- list_cons(find_minimal(x), l)
x <- delete_minimal(x)
}
l
}
heap_to_vector <- function(x) {
as.vector(heap_to_list(x), mode = class(find_minimal(x)))
}
heap_sort <- function(vec, empty_heap) {
heap <- vector_to_heap(empty_heap, vec)
lst <- heap_to_list(heap)
list_reverse(lst)
}
as.vector(heap_sort(sample(1:10), empty_leftist_heap()), "integer")
source('~/.active-rstudio-document', echo=TRUE)
debugSource('~/Dropbox/Misc. writing/Books/Advanced Statistical Programming in R/Functional Data Structures in R/R/heaps.R', echo=TRUE)
vec <- 1:10
q <- empty_env_queue()
for (e in vec)
q <- enqueue(q, singleton_heap(e))
debugSource('~/Dropbox/Misc. writing/Books/Advanced Statistical Programming in R/Functional Data Structures in R/R/heaps.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Advanced Statistical Programming in R/Functional Data Structures in R/R/heaps.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Advanced Statistical Programming in R/Functional Data Structures in R/R/heaps.R', echo=TRUE)
nil <- function() NULL
cons <- function(car, cdr) {
force(car)
force(cdr)
function() list(car = car, cdr = cdr)
}
is_nil <- function(lst) is.null(lst())
car <- function(lst) lst()$car
cdr <- function(lst) lst()$cdr
cat <- function(l1, l2) {
force(l1)
force(l2)
if (is_nil(l1)) l2
else {
lazy_thunk <- function(lst) function() lst()
lazy_thunk(cons(car(l1), cat(cdr(l1), l2)))
}
}
reverse <- function(lst) {
print("reverse")
acc <- empty_list()
while (!is_empty(lst)) {
acc <- list_cons(list_head(lst), acc)
lst <- list_tail(lst)
}
acc
}
lazy_queue <- function(front, back, front_length, back_length) {
structure(list(front = front, back = back,
front_length = front_length,
back_length = back_length),
class = "lazy_queue")
}
make_q <- function(front, back, front_length, back_length) {
if (back_length <= front_length)
lazy_queue(front, back, front_length, back_length)
else
lazy_queue(cat(front, reverse(back)), nil, front_length + back_length, 0)
}
#' Creates an empty lazy queue
#' @export
empty_lazy_queue <- function() lazy_queue(nil, nil, nil)
#' @method is_empty lazy_queue
#' @export
is_empty.lazy_queue <- function(x) is_nil(x$front) && is_nil(x$back)
#' @method enqueue lazy_queue
#' @export
enqueue.lazy_queue <- function(x, elm)
make_q(x$front, cons(elm, x$back), x$helper)
#' @method front lazy_queue
#' @export
front.lazy_queue <- function(x) car(x$front)
#' @method dequeue lazy_queue
#' @export
dequeue.lazy_queue <- function(x)
make_q(cdr(x$front), x$back, x$helper)
q <- empty_lazy_queue()
source('~/Dropbox/Misc. writing/Books/Advanced Statistical Programming in R/Functional Data Structures in R/R/lazy-evaluation.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Advanced Statistical Programming in R/Functional Data Structures in R/R/lazy-evaluation.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Advanced Statistical Programming in R/Functional Data Structures in R/R/lazy-evaluation.R', echo=TRUE)
q <- empty_lazy_queue()
is_empty(q)
q <- enqueue(q, 1)
source('~/Dropbox/Misc. writing/Books/Advanced Statistical Programming in R/Functional Data Structures in R/R/lazy-evaluation.R', echo=TRUE)
q <- empty_lazy_queue()
q <- enqueue(q, 1)
q <- enqueue(q, 2)
q <- enqueue(q, 3)
q <- enqueue(q, 4)
q <- enqueue(q, 5)
q <- enqueue(q, 6)
q <- empty_lazy_queue()
q <- enqueue(q, 1)
q <- enqueue(q, 2)
q
q <- enqueue(q, 2)
source('~/Dropbox/Misc. writing/Books/Advanced Statistical Programming in R/Functional Data Structures in R/R/lazy-evaluation.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Advanced Statistical Programming in R/Functional Data Structures in R/R/lazy-evaluation.R', echo=TRUE)
q <- empty_lazy_queue()
q <- enqueue(q, 1)
q <- enqueue(q, 2)
q <- enqueue(q, 3)
q <- enqueue(q, 4)
q <- enqueue(q, 5)
q <- enqueue(q, 6)
source('~/Dropbox/Misc. writing/Books/Advanced Statistical Programming in R/Functional Data Structures in R/R/lazy-evaluation.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Advanced Statistical Programming in R/Functional Data Structures in R/R/lazy-evaluation.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Advanced Statistical Programming in R/Functional Data Structures in R/R/lazy-evaluation.R', echo=TRUE)
q <- empty_lazy_queue()
q <- enqueue(q, 1)
q <- enqueue(q, 2)
q <- enqueue(q, 3)
q <- enqueue(q, 4)
q <- enqueue(q, 5)
q <- enqueue(q, 6)
source('~/Dropbox/Misc. writing/Books/Advanced Statistical Programming in R/Functional Data Structures in R/R/lazy-evaluation.R', echo=TRUE)
q <- empty_lazy_queue()
q <- enqueue(q, 1)
q <- enqueue(q, 2)
q <- enqueue(q, 3)
source('~/Dropbox/Misc. writing/Books/Advanced Statistical Programming in R/Functional Data Structures in R/R/lazy-evaluation.R', echo=TRUE)
q <- empty_lazy_queue()
q <- enqueue(q, 1)
q <- enqueue(q, 2)
q <- enqueue(q, 3)
source('~/Dropbox/Misc. writing/Books/Advanced Statistical Programming in R/Functional Data Structures in R/R/lazy-evaluation.R', echo=TRUE)
q <- empty_lazy_queue()
q <- enqueue(q, 1)
q <- enqueue(q, 2)
q <- enqueue(q, 3)
source('~/Dropbox/Misc. writing/Books/Advanced Statistical Programming in R/Functional Data Structures in R/R/lazy-evaluation.R', echo=TRUE)
q <- empty_lazy_queue()
q <- enqueue(q, 1)
q <- enqueue(q, 2)
q <- enqueue(q, 3)
q <- enqueue(q, 4)
q <- enqueue(q, 5)
q <- enqueue(q, 6)
source('~/Dropbox/Misc. writing/Books/Advanced Statistical Programming in R/Functional Data Structures in R/R/lazy-evaluation.R', echo=TRUE)
source('~/Dropbox/Misc. writing/Books/Advanced Statistical Programming in R/Functional Data Structures in R/R/lazy-evaluation.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
f()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
comb()
source('~/.active-rstudio-document', echo=TRUE)
comb()
comb <- combine(f, combine(f, f))
comb()
source('~/.active-rstudio-document', echo=TRUE)
comb <- combine(f, combine(f, f))
comb()
f <- delay(print("hello"))
comb <- combine(f, f)
comb()
comb()
comb <- combine(f, combine(f, f))
comb()
f <- delay(print("hello"))
comb <- combine(f, combine(f, f))
comb()
l1 <- cons(1, cons(2, cons(3, nil)))
l2 <- cons(4, cons(5, cons(6, nil)))
reverse(l1)
rl1 <- reverse(l1)
rl1
rl1()
rl1 <- reverse(l1)
cat(l1, l2)
cat(l1, reverse(l2))
x <- cat(l1, reverse(l2))
car(x)
cdr(x)
x <- cat(l1, reverse(l2))
car(x)
x <- cdr(x)
x <- cdr(x)
x <- cdr(x)
x <- cdr(x)
tibble(algo = algo, n = n, time = benchmarks$time / 1e9) # time in sec
source('~/Dropbox/Misc. writing/Books/Advanced Statistical Programming in R/Functional Data Structures in R/R/performance.R', echo=TRUE)
library(ralgo)
library(ralgo)
source('~/.active-rstudio-document', echo=TRUE)
ns <- seq(500, 1000, by = 100)
performance <- rbind(get_performance("leftist", ns, setup, evaluate(empty_leftist_heap())),
get_performance("binomial", ns, setup, evaluate(empty_binomial_heap())))
ns <- seq(10, 100, by = 10)
performance <- rbind(get_performance("leftist", ns, setup, evaluate(empty_leftist_heap())),
get_performance("binomial", ns, setup, evaluate(empty_binomial_heap())))
ggplot(performance, aes(x = as.factor(n), y = time / n, fill = algo)) +
geom_boxplot() +
scale_fill_grey("Data structure") +
xlab(quote(n)) + ylab(expression(Time / n)) + theme_minimal()
ggplot(performance, aes(x = as.factor(n), y = time / (n * log(n)), fill = algo)) +
geom_boxplot() +
scale_fill_grey("Data structure") +
xlab(quote(n)) + ylab(expression(Time / n)) + theme_minimal()
ggplot(performance, aes(x = as.factor(n), y = time / (n * log(n)), fill = algo)) +
geom_boxplot() +
scale_fill_grey("Data structure") +
xlab(quote(n)) + ylab(expression(Time / (n * log(n))) + theme_minimal()
))))
ggplot(performance, aes(x = as.factor(n), y = time / (n * log(n)), fill = algo)) +
geom_boxplot() +
scale_fill_grey("Data structure") +
xlab(quote(n)) + ylab(expression(Time / (n * log(n))) + theme_minimal()
ggplot(performance, aes(x = as.factor(n), y = time / (n * log(n)), fill = algo)) +
geom_boxplot() +
scale_fill_grey("Data structure") +
xlab(quote(n)) + ylab(expression(Time / (n * log(n)))) + theme_minimal()
ggplot(performance, aes(x = as.factor(n), y = time / (n * log(n)), fill = algo)) +
geom_boxplot() +
scale_fill_grey("Data structure") +
xlab(quote(n)) + ylab(expression(Time / (n * log(n)))) + theme_minimal()
source('~/.active-rstudio-document', echo=TRUE)
ggplot(performance, aes(x = as.factor(n), y = time / n, fill = algo)) +
geom_boxplot() +
scale_fill_grey("Data structure") +
xlab(quote(n)) + ylab(expression(Time / n)) + theme_minimal()
ns <- seq(1000, 5000, by = 1000)
performance <- rbind(get_performance("leftist", ns, setup, evaluate(empty_leftist_heap())),
get_performance("binomial", ns, setup, evaluate(empty_binomial_heap())))
ggplot(performance, aes(x = as.factor(n), y = time / n, fill = algo)) +
geom_boxplot() +
scale_fill_grey("Data structure") +
xlab(quote(n)) + ylab(expression(Time / n)) + theme_minimal()
source('~/Dropbox/Misc. writing/Books/Advanced Statistical Programming in R/Functional Data Structures in R/R/heap-performance.R', echo=TRUE)
ggsave("heap-construction-leftist-binomial-comparison.pdf", width = 12, height = 8, units = "cm")
ggsave("heap-construction-leftist-binomial-comparison.png", width = 12, height = 8, units = "cm")
ggplot(performance, aes(x = as.factor(n/1000), y = time / n, fill = algo)) +
geom_boxplot() +
scale_fill_grey("Data structure") +
xlab("n (thousands)") + ylab(expression(Time / n)) + theme_minimal()
ggsave("heap-construction-leftist-binomial-comparison.pdf", width = 12, height = 8, units = "cm")
ggsave("heap-construction-leftist-binomial-comparison.png", width = 12, height = 8, units = "cm")
